' ------------------------------------------------------------------------------
' Constant definitions
const pathBase$ := "C:\\MPC";
const pathFileY$ := pathBase$ + "\\" + "y.bin";
const pathFileU$ := pathBase$ + "\\" + "u.bin";
const pathLock$  := pathBase$ + "\\" + "lock";

'const ch% := 2;
const ch% := 10;
const fs% := 5e3;
const tSample := .05; 's

' Test only
const tStart := 1200;
const tEnd   := 1210;

' ------------------------------------------------------------------------------
' General state variables
const nData% := tSample*fs%;
var bufferY[nData%];
var bufferU[nData%];
var tCur;

var vSample%;
var vFileL%;
var vFileY%;
var vFileU%;

var ret%;
var pos%;

' ==============================================================================
' Helper functions

Func Init();
FilePathSet(pathBase$, 0, 1);   ' set current dir, create dir
vSample% := View();
vFileL% := FileOpen(pathLock$,  9, 1);  'binary, write (new file)
vFileY% := FileOpen(pathFileY$, 9, 1);  'binary, write (new file)
vFileU% := FileOpen(pathFileU$, 9, 0);  'binary, read (existing file)
'PrintLog(vSample%);
'PrintLog(vFileY%);
'PrintLog(vFileU%);
end;


' ------------------------------------------------------------------------------
Func Exit();
View(vFileY%);
FileClose();

View(vFileU%);
FileClose();

View(vFileL%);
FileClose();
FileDelete(pathLock$);
end;


' ------------------------------------------------------------------------------
Func UpdateUKF();
View(vSample%);
ret% := ChanData(ch%, bufferY, tCur, tCur+tSample);
'PrintLog("Sampled %d\n", ret%);

View(vFileY%);
ret% := BWriteSize(8, bufferY); '64-bit double
pos% := BSeek(0, 2); 'move to end of file (flush)
'PrintLog("Wrote %d (pos: %d)\n", ret%*nData%, pos%);

View(vFileU%);
repeat
    YieldSystem();
    ret% := BReadSize(8, bufferU); '64-bit double
until ret% > 0;
'PrintLog("Read %d\n", ret%);

end;



' ==============================================================================
' Run script

Init();
for tCur := tStart to tEnd step tSample do
    UpdateUKF();
    'Yield(1e-3);
    'tCur := tCur + tSample;
next;
Exit();
